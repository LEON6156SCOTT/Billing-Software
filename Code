/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Billing_Software;

/**
 *
 * @author Leon Scott
 */
import java.awt.event.KeyEvent;
import java.lang.Object;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.*;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import javax.swing.table.DefaultTableModel;
import java.time.format.DateTimeFormatter;  
import java.awt.Font;
import java.awt.FontMetrics;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.time.LocalDateTime;   
public class billing extends javax.swing.JFrame {

    int values,val,value;
    String qty,rte;
    int qty_no,rte_no;
    DefaultTableModel dm1;  // OBJECT FOR LEFT TABLE    
    DefaultTableModel dm2;  // OBJECT FOR RIGHT TABLE
    /*
     * Creates new form billing
     */ 
    
    protected static double convert_CM_To_PPI(double cm) {            
	        return toPPI(cm * 0.393600787);            
}
 
protected static double toPPI(double inch) {            
	        return inch * 72d;            
}

    

    public PageFormat getPageFormat(PrinterJob pj)
{
    
    PageFormat pf = pj.defaultPage();
    Paper paper = pf.getPaper();    

    double middleHeight =8.0;  
    double headerHeight = 2.0;                  
    double footerHeight = 2.0;                  
    double width = convert_CM_To_PPI(8);      //printer know only point per inch.default value is 72ppi
    double height = convert_CM_To_PPI(headerHeight+middleHeight+footerHeight); 
    paper.setSize(width, height);
    paper.setImageableArea(                    
        0,
        10,
        width,            
        height - convert_CM_To_PPI(1)
    );   //define boarder size    after that print area width is about 180 points
            
    pf.setOrientation(PageFormat.PORTRAIT);           //select orientation portrait or landscape but for this time portrait
    pf.setPaper(paper);    

    return pf;
}
    public billing() {
        initComponents(); 
        dm1 =(DefaultTableModel)LEFTTABLE.getModel();
        dm2 =(DefaultTableModel)MIDDLETABLE.getModel();
    }
    
public class BillPrintable implements Printable {
    
   
    
    @Override
  public int print(Graphics graphics, PageFormat pageFormat,int pageIndex) 
  throws PrinterException 
  {    
      
                
        
      int result = NO_SUCH_PAGE;    
        if (pageIndex == 0) {                    
        
            Graphics2D g2d = (Graphics2D) graphics;                    

            double width = pageFormat.getImageableWidth();                    
           
            g2d.translate((int) pageFormat.getImageableX(),(int) pageFormat.getImageableY()); 

           

            FontMetrics metrics=g2d.getFontMetrics(new Font("Arial",Font.BOLD,7));
            int idLength=metrics.stringWidth("000");
            int amtLength=metrics.stringWidth("000000");
            int qtyLength=metrics.stringWidth("00000");
            int priceLength=metrics.stringWidth("000000");
            int prodLength=(int)width - idLength - amtLength - qtyLength - priceLength-17;
            
            int productPosition = 0;
            int discountPosition= prodLength+5;
            int pricePosition = discountPosition +idLength+10;
            int qtyPosition=pricePosition + priceLength + 4;
            int amtPosition=qtyPosition + qtyLength;
            
            
              
        try{
            /*Draw Header*/
            int y=20;
            int yShift = 10;
            int headerRectHeight=15;
            int headerRectHeighta=40;
            
            ///////////////// Product names Get ///////////
                String  pn1a=RIGHTTEXTAREA.getText();
                
            ///////////////// Product names Get ///////////
                
            
            ///////////////// Product price Get ///////////
               
            ///////////////// Product price Get ///////////
                
            g2d.setFont(new Font("Monospaced",Font.PLAIN,9));
            g2d.drawString(pn1a,12,y);y+=yShift;
                  
                  
    }
    catch(Exception r){
    r.printStackTrace();
    }

              result = PAGE_EXISTS;    
          }    
          return result;    
      }
   }
    //===================================================
    // PRINTING TABLE FUNCTION STARTS
    
    public void show_table()
    {
        int i,j;
        int nrow=dm2.getRowCount();
        int ncolumn=dm2.getColumnCount();
        Object [][] tabled = new Object [nrow][ncolumn];
        for(i=0;i<nrow;i++)
        {
            for(j=0;j<ncolumn;j++)
            {
                tabled[i][j]=dm2.getValueAt(i, j);
                RIGHTTEXTAREA.append(tabled[i][j] + "\t");
            }
            RIGHTTEXTAREA.append("\n");
        }
    }
    
    // PRINTING FUNCTION ENDS
    //=====================================================
    
    //===================================================
    //FUNCTION FOR RESET BUTTON STARTS
    public void reset()
    {
        code_textfield.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        jTextField4.setText("1");
        RIGHTTEXTAREA.setText(null);
        jTextField1.setText(null);
        int rowCount = dm2.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) 
        {
            dm2.removeRow(i);
        }
    }
    // FUNCTION FOR RESET BUTTON ENDS
    //===================================================
    
    //===================================================
    // FUNCTION TO GET BILL AMOUNT, CALLED BY [jButton2ActionPerformed] STARTS
    public void sum()
    {
        int temp=0,i;
        for(i=0;i<dm2.getRowCount();i++)
        {
            temp=temp+Integer.parseInt(MIDDLETABLE.getValueAt(i,2).toString());
            jTextField1.setText(Integer.toString(temp));
        }
    }
    // FUNCTION TO GET BILL AMOUNT, CALLED BY [jButton2ActionPerformed] ENDS
    //===================================================
    
    //===================================================
    //FUNCTION FOR FILTERING THE MENU FEATURE STARTS
    private void filter(String query)
    {
        dm1=(DefaultTableModel) LEFTTABLE.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dm1);
        LEFTTABLE.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query)); 
    }
    // FUNCTION FOR FILTERING THE MENU FEATURE ENDS
    //===================================================
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        HEADING = new javax.swing.JPanel();
        TOIlabel = new javax.swing.JLabel();
        RIGHTPANEL = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MIDDLETABLE = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        submit_button = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        RIGHTPANEL1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        RIGHTTEXTAREA = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        MIDDLEBUTTON = new javax.swing.JButton();
        LEFTPANEL = new javax.swing.JPanel();
        code_label = new javax.swing.JLabel();
        code_textfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        LEFTTABLE = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(244, 245, 240));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HEADING.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TOIlabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TOIlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TOIlabel.setText("TASTE OF ITALY");
        HEADING.add(TOIlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, -12, 310, 40));

        getContentPane().add(HEADING, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 19, 790, 30));

        RIGHTPANEL.setBackground(new java.awt.Color(0, 140, 69));
        RIGHTPANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(205, 33, 45), 9), "TOTAL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N
        RIGHTPANEL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MIDDLETABLE.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 11)); // NOI18N
        MIDDLETABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM", "QTY.", "RATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MIDDLETABLE.setToolTipText("");
        jScrollPane2.setViewportView(MIDDLETABLE);

        RIGHTPANEL.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 400, 330));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        RIGHTPANEL.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 300, 40));
        RIGHTPANEL.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 120, 40));

        jTextField4.setText("1");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        RIGHTPANEL.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, 80, 40));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("ITEM :");
        RIGHTPANEL.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 60, 40));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("RATE :");
        RIGHTPANEL.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 50, 40));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("QTY :");
        RIGHTPANEL.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 60, 40));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("TOTAL RATE :");
        RIGHTPANEL.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 510, 90, 40));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        RIGHTPANEL.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 510, 270, 40));

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setText("TOTAL");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        RIGHTPANEL.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 570, 110, 50));

        submit_button.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        submit_button.setText("SUBMIT");
        submit_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submit_buttonMouseClicked(evt);
            }
        });
        submit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_buttonActionPerformed(evt);
            }
        });
        submit_button.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                submit_buttonKeyPressed(evt);
            }
        });
        RIGHTPANEL.add(submit_button, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 110, 50));

        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton4.setText("DELETE");
        jButton4.setToolTipText("");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        RIGHTPANEL.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 570, 120, 50));

        getContentPane().add(RIGHTPANEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 60, 440, 640));

        RIGHTPANEL1.setBackground(new java.awt.Color(0, 140, 69));
        RIGHTPANEL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(205, 33, 45), 9), "RECIEPT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N
        RIGHTPANEL1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RIGHTTEXTAREA.setColumns(20);
        RIGHTTEXTAREA.setFont(new java.awt.Font("Monospaced", 1, 9)); // NOI18N
        RIGHTTEXTAREA.setRows(5);
        jScrollPane3.setViewportView(RIGHTTEXTAREA);

        RIGHTPANEL1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 420, 520));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton1.setText("BILL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        RIGHTPANEL1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 580, 110, 40));

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton3.setText("PRINT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        RIGHTPANEL1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 580, 130, 40));

        MIDDLEBUTTON.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        MIDDLEBUTTON.setText("RESET");
        MIDDLEBUTTON.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MIDDLEBUTTONMouseClicked(evt);
            }
        });
        MIDDLEBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIDDLEBUTTONActionPerformed(evt);
            }
        });
        RIGHTPANEL1.add(MIDDLEBUTTON, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 580, 100, 40));

        getContentPane().add(RIGHTPANEL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 60, 460, 640));

        LEFTPANEL.setBackground(new java.awt.Color(0, 140, 69));
        LEFTPANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(205, 33, 45), 9), "ITEM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N
        LEFTPANEL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        code_label.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        code_label.setText("ITEM CODE:");
        LEFTPANEL.add(code_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 73, 40));

        code_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                code_textfieldActionPerformed(evt);
            }
        });
        code_textfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                code_textfieldKeyReleased(evt);
            }
        });
        LEFTPANEL.add(code_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 280, 40));

        LEFTTABLE.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 11)); // NOI18N
        LEFTTABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" PIZZA", "onion capsicum pizza small",  new Integer(59)},
                {" PIZZA", "onion capsicum pizza large ",  new Integer(99)},
                {" PIZZA", "onion tomato pizza small",  new Integer(69)},
                {" PIZZA", "onion tomato pizza large",  new Integer(120)},
                {" PIZZA", "mix veg pizza small         ",  new Integer(79)},
                {" PIZZA", "mix veg pizza large         ",  new Integer(130)},
                {" PIZZA", "special corn pizza small ",  new Integer(89)},
                {" PIZZA", "special corn pizza large ",  new Integer(140)},
                {" PIZZA", "paneer tikka pizza small ",  new Integer(99)},
                {" PIZZA", "paneer tikka pizza large   ",  new Integer(150)},
                {" PIZZA", "special veg pizza small   ",  new Integer(99)},
                {" PIZZA", "special veg pizza large   ",  new Integer(150)},
                {" PIZZA", "margharita pizza small      ",  new Integer(99)},
                {" PIZZA", "margharita pizza large       ",  new Integer(160)},
                {" PIZZA", "mushroom pizza small       ",  new Integer(99)},
                {" PIZZA", "mushroom pizza large        ",  new Integer(190)},
                {" PIZZA", "love-bite pizza small      ",  new Integer(110)},
                {" PIZZA", "love-bite pizza large      ",  new Integer(180)},
                {" PIZZA", "chicken pizza small       ",  new Integer(99)},
                {" PIZZA", "chicken pizza large        ",  new Integer(180)},
                {" PIZZA", "afghani pizza(halal) small",  new Integer(120)},
                {" PIZZA", "afghani pizza(halal) large",  new Integer(200)},
                {" PIZZA", "mutton pizza small           ",  new Integer(120)},
                {" PIZZA", "mutton pizza large          ",  new Integer(200)},
                {" PIZZA", "taste of Italy special pizza ",  new Integer(250)},
                {" CRUNCHY BITE", "capsicum crunchy bite       ",  new Integer(59)},
                {" CRUNCHY BITE", "paneer crunchy bite         ",  new Integer(79)},
                {" CRUNCHY BITE", "mushroom crunchy bite      ",  new Integer(89)},
                {" CRUNCHY BITE", "special veg crunchy bite ",  new Integer(99)},
                {" CRUNCHY BITE", "chicken crunchy pizza       ",  new Integer(99)},
                {" SANDWICH", "fresh sandwich            ",  new Integer(50)},
                {" SANDWICH", "veg.(grilled) sandwich     ",  new Integer(70)},
                {" SANDWICH", "paneer(grilled) sandwich",  new Integer(80)},
                {" SANDWICH", "chicken(grilled) sandwich",  new Integer(99)},
                {" SNACKS", "french fries               ",  new Integer(50)},
                {" SNACKS", "wringle french fries        ",  new Integer(70)},
                {" SNACKS", "masala french fries       ",  new Integer(60)},
                {" SNACKS", "spring roll               ",  new Integer(60)},
                {" SNACKS", "veg. nuggets              ",  new Integer(70)},
                {" SNACKS", "garlic shot               ",  new Integer(70)},
                {" SNACKS", "potato shot               ",  new Integer(70)},
                {" SNACKS ", "chicken nuggets             ",  new Integer(99)},
                {" SNACKS", "chicken seek kebab         ",  new Integer(99)},
                {" SNACKS", "chicken cutlet           ",  new Integer(120)},
                {" SNACKS", "fish cutlet                 ",  new Integer(150)},
                {" COMBO", "veg burger combo          ",  new Integer(79)},
                {" COMBO", "cheese burger combo       ",  new Integer(79)},
                {" COMBO", "maharaja burger combo       ",  new Integer(79)},
                {" COMBO", "veg sandwich combo",  new Integer(120)},
                {" COMBO", "veg. pizza  combo         ",  new Integer(150)},
                {" COMBO", "chicken burger combo         ",  new Integer(99)},
                {" COMBO", "fish burger combo          ",  new Integer(150)},
                {" COMBO", "ham burger combo          ",  new Integer(120)},
                {" COMBO", "mutton burger combo         ",  new Integer(130)},
                {" COMBO", "chicken sandwich combo    ",  new Integer(150)},
                {" COMBO ", "chicken pizza combo        ",  new Integer(220)},
                {" BEVERGES", "hot italian caffe         ",  new Integer(35)},
                {" CAKE ", "cake                     ",  new Integer(250)}
            },
            new String [] {
                "ITEM CODE", "ITEM", "RATE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LEFTTABLE.setToolTipText("");
        LEFTTABLE.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        LEFTTABLE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LEFTTABLEMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LEFTTABLEMouseEntered(evt);
            }
        });
        LEFTTABLE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LEFTTABLEKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(LEFTTABLE);

        LEFTPANEL.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 400, 510));

        getContentPane().add(LEFTPANEL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 440, 640));

        pack();
    }// </editor-fold>                        

    private void submit_buttonActionPerformed(java.awt.event.ActionEvent evt) {                                              
       
    }                                             

    private void code_textfieldActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void code_textfieldKeyReleased(java.awt.event.KeyEvent evt) {                                           
        String query = code_textfield.getText();
        filter(query);
    }                                          
/**/
    private void submit_buttonMouseClicked(java.awt.event.MouseEvent evt) {                                           
        try{
            qty=jTextField4.getText();
            qty_no=Integer.parseInt(qty);
            rte=jTextField3.getText();
            rte_no=Integer.parseInt(rte);
            rte_no=rte_no*qty_no;
            rte=Integer.toString(rte_no);
            dm2.insertRow(dm2.getRowCount(),new Object[]{jTextField2.getText(),jTextField4.getText(),rte});
            jTextField4.setText("1");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Please Select Item From the Table");
        }
    }                                          

    private void LEFTTABLEMouseEntered(java.awt.event.MouseEvent evt) {                                       

    }                                      

    private void LEFTTABLEMouseClicked(java.awt.event.MouseEvent evt) {                                       
        values=LEFTTABLE.getSelectedRow();
        jTextField2.setText(LEFTTABLE.getValueAt(values, 1).toString());
        jTextField3.setText(LEFTTABLE.getValueAt(values, 2).toString());
    }                                      

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {                                            
            
    }                                           

    private void MIDDLEBUTTONActionPerformed(java.awt.event.ActionEvent evt) {                                             
        reset();
    }                                            

    private void MIDDLEBUTTONMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd             HH:mm:ss");  
        LocalDateTime now = LocalDateTime.now();    
        RIGHTTEXTAREA.append("======================================================\n"
        +"\t       TASTE OF ITALY\n"+"======================================================\n"+"Shop No. 3, Block 6, Chandigarh University\n"+
        "Phone No. 7519300039\n"+"   Date \t\t Time \n"+dtf.format(now)+"\n======================================================\n"
                + "Item Name \t\t  " + "      Qty   " + " Rate\n");
        show_table();
        RIGHTTEXTAREA.append("\n======================================================\n"+"Net Payable Amount : "+jTextField1.getText()+"\n"
                + "======================================================\n"+"\t   Free Hostel Delivery\n\t    Call : 7519300039\n"+"\t"
                + "      HAPPY EATING\n          Created By- Tanmay Vaish"+"\n======================================================\n\n");
        
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        try{
            sum();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Unexpected Error Occured");
        }
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        PrinterJob pj = PrinterJob.getPrinterJob();        
        pj.setPrintable(new BillPrintable(),getPageFormat(pj));
        try {
             pj.print();
          
        }
         catch (PrinterException ex) {
                 ex.printStackTrace();
        }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try{ 
         value=MIDDLETABLE.getSelectedRow();
         dm2.removeRow(value);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"No Item Selected");
        }
    }                                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void submit_buttonKeyPressed(java.awt.event.KeyEvent evt) {                                         
        
    }                                        

    private void LEFTTABLEKeyPressed(java.awt.event.KeyEvent evt) {                                     
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {    
            values=LEFTTABLE.getSelectedRow();
            jTextField2.setText(LEFTTABLE.getValueAt(values, 1).toString());
            jTextField3.setText(LEFTTABLE.getValueAt(values, 2).toString());
            try{
                qty=jTextField4.getText();
                qty_no=Integer.parseInt(qty);
                rte=jTextField3.getText();
                rte_no=Integer.parseInt(rte);
                rte_no=rte_no*qty_no;
                rte=Integer.toString(rte_no);
                dm2.insertRow(dm2.getRowCount(),new Object[]{jTextField2.getText(),jTextField4.getText(),rte});
                jTextField4.setText("1");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Select Item from the table on right");
            }
        }
        if(evt.getKeyCode()==KeyEvent.VK_DOWN)
        {
            values=LEFTTABLE.getSelectedRow();
            jTextField2.setText(LEFTTABLE.getValueAt(values, 1).toString());
            jTextField3.setText(LEFTTABLE.getValueAt(values, 2).toString());
        }
        if(evt.getKeyCode()==KeyEvent.VK_UP)
        {
            values=LEFTTABLE.getSelectedRow();
            jTextField2.setText(LEFTTABLE.getValueAt(values, 1).toString());
            jTextField3.setText(LEFTTABLE.getValueAt(values, 2).toString());
        }
        
    }                                    

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new billing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel HEADING;
    private javax.swing.JPanel LEFTPANEL;
    private javax.swing.JTable LEFTTABLE;
    private javax.swing.JButton MIDDLEBUTTON;
    private javax.swing.JTable MIDDLETABLE;
    private javax.swing.JPanel RIGHTPANEL;
    private javax.swing.JPanel RIGHTPANEL1;
    private javax.swing.JTextArea RIGHTTEXTAREA;
    private javax.swing.JLabel TOIlabel;
    private javax.swing.JLabel code_label;
    private javax.swing.JTextField code_textfield;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton submit_button;
    // End of variables declaration                   
}
